#Bash functions
#Simple ideas for useful bash functions are any comands
#which need given arguments inserted in weird places and such

#Apply zenburn theme on a console
zenburn(){
if [[ $TERM = linux ]] ; then
    echo -en "\e]P01e2320" # zenburn black (normal black)
    echo -en "\e]P8709080" # bright-black  (darkgrey)
    echo -en "\e]P1705050" # red           (darkred)
    echo -en "\e]P9dca3a3" # bright-red    (red)
    echo -en "\e]P260b48a" # green         (darkgreen)
    echo -en "\e]PAc3bf9f" # bright-green  (green)
    echo -en "\e]P3dfaf8f" # yellow        (brown)
    echo -en "\e]PBf0dfaf" # bright-yellow (yellow)
    echo -en "\e]P4506070" # blue          (darkblue)
    echo -en "\e]PC94bff3" # bright-blue   (blue)
    echo -en "\e]P5dc8cc3" # purple        (darkmagenta)
    echo -en "\e]PDec93d3" # bright-purple (magenta)
    echo -en "\e]P68cd0d3" # cyan          (darkcyan)
    echo -en "\e]PE93e0e3" # bright-cyan   (cyan)
    echo -en "\e]P7dcdccc" # white         (lightgrey)
    echo -en "\e]PFffffff" # bright-white  (white)
else
echo "Not running on a console"
fi
}
#change 2 finger vertical scrolling, mainly for games
vert(){
synclient VertTwoFingerScroll="$1"
}
#search current directory, why not just an alias, I don't know
search(){
ls | grep "$@"
}
#search processes
ps-search(){
ps -e | grep "$@"
}
#set apple function keys, 1 for media keys, 2 for fn keys, 0 for always fn keys
fn-keys(){
echo "$1" | sudo tee /sys/module/hid_apple/parameters/fnmode
}
qemu(){
  sudo qemu-system-x86_64 -enable-kvm -m 4G "$@"
}
background(){
"$@" &>/dev/null &
}
#rename a file to its md5sum + a given extension
md5-rename(){
if [[ -n "$1" ]] && [[ -n "$2" ]] && [[ -f "$1" ]]; then
 MD5=$(md5sum "$1" | awk '{print $1}')
 if [[ -f "$MD5"."$2" ]]; then
  echo "file exists"
  return 2;
 else
  mv -f "$1" "$MD5"."$2" &>/dev/null
  return 0;
 fi
else
 echo -e 'usage: md5-rename filename extension\n\trename filename to `md5sum filename`.extension'
 return 1;
fi
disown
}
md5-rename-all(){
for i in $(ls *."$1");do
md5-rename "$i" "$1" &>/dev/null
done
}
#not super useful as is, but has potential to be useful
rm-if-not(){
ls | grep "[[:print:]]*[^\"$1\"]"
}
#do "$2-$#" "$1"times
do-times(){
    COUNT="$1"
    shift
    while [[ $COUNT -gt 0 ]];do
	"$@"
	COUNT=$((COUNT-1))
    done
}
zip-dir(){
ZIP_NAME="$1"
shfit
find "$@" | zip "$ZIP_NAME" -@
}
rsync-backup(){
sudo rsync -aAXv /* "$1" --exclude={/dev/*,/proc/*,/sys/*,/tmp/*,/run/*,/mnt/*,/media/*,/lost+found}
}
mlton-keep(){
MLTON_OPTS='-keep machine -keep ssa -keep dot -keep rssa -keep xml -keep ssa2  -keep sxml'
MLTON_BASENAME=$(echo "$1" | awk '{print(substr($0,1,length-4))}')
MLTON_PROG="$1"
shift
MLTON_OPTS="$MLTON_OPTS -show-def-use $MLTON_BASENAME.def_use -show-basis $MLTON_BASENAME.basis"
if [ -f $MLTON_BASENAME ]; then
    mv $MLTON_BASENAME $MLTON_BASENAME.old
elif [ ! -d $MLTON_BASENAME ]; then
    mkdir $MLTON_BASENAME
fi
(cd $MLTON_BASENAME && mlton $MLTON_OPTS -output $MLTON_BASENAME ../$MLTON_PROG $@)
}
do-ext(){
if [ -z "$2" ]; then
  echo "usage: do-ext ext command"	
  return
fi
#need to test, make sure it works with the referances and all
find -name "*.$1" -print0 | xargs -0 "$@"
}
mv-ext(){
do-ext "$1" mv -t "$2"
}
safe-source(){
if [ -f "$1" ];then
    . "$1"
fi
}
zip-dir(){
ZIP_NAME="$1"
shfit
find "$@" | zip "$ZIP_NAME" -@
}
rsync-backup(){
sudo rsync -aAXv /* "$1" --exclude={/dev/*,/proc/*,/sys/*,/tmp/*,/run/*,/mnt/*,/media/*,/lost+found}
}
mlton-keep(){
MLTON_OPTS='-keep machine -keep ssa -keep dot -keep rssa -keep xml -keep ssa2  -keep sxml -keep g'
MLTON_BASENAME=$(echo "$1" | awk '{print(substr($0,1,length-4))}')
MLTON_PROG="$1"
shift
MLTON_OPTS="$MLTON_OPTS -show-def-use $MLTON_BASENAME.def_use -show-basis $MLTON_BASENAME.basis"
if [ -f $MLTON_BASENAME ]; then
    mv $MLTON_BASENAME $MLTON_BASENAME.old
elif [ ! -d $MLTON_BASENAME ]; then
    mkdir $MLTON_BASENAME
fi
(cd $MLTON_BASENAME && mlton $MLTON_OPTS -output $MLTON_BASENAME ../$MLTON_PROG $@)
}
do-ext(){
if [ -z "$2" ]; then
  echo "usage: do-ext ext command"	
  return
fi
#need to test, make sure it works with the referances and all
find -name "*.$1" -print0 | xargs -0 "$@"
}
mv-ext(){
do-ext "$1" mv -t "$2"
}
safe-source(){
if [ -f "$1" ];then
    . "$1"
fi
}
zip-dir(){
ZIP_NAME="$1"
shfit
find "$@" | zip "$ZIP_NAME" -@
}
vbox-mod-compile(){
  sudo dkms install vboxhost/$(pacman -Q virtualbox|awk {'print $2'}|sed 's/\-.\+//') -k $(uname -rm|sed 's/\ /\//')
  sudo modprobe vboxdrv
}
set-alarm(){
    alarm_time="$1"
    TEMP=$(getopt -o s:: --long snooze:: -n alarm -- "$@")
    eval set -- "$TEMP"
    while true; do
        case "$1" in
            -s|--snooze)
                snooze=t
                case "$2" in
                    "") snooze_time=5; shift 2;;
                    *) snooze_time="$2"; shift 2;;
                esac ;;
	    --) shift ; break ;;
	    *) echo "Internal error!" ; exit 1 ;;
        esac
    done
    at "$1" -f /home/tucker/.alarm
    if [[ $snooze ]]; then
    at $(date -d "$1 $snooze_time minutes" +%H:%M) -f /home/tucker/.alarm
    fi
}
hello-world-c(){
    (cat <<"EOF"
#include <stdio.h>
int main(){
  printf("Hello, World!\n");
  return;
}
EOF
) >"$1"
}
rar-to-zip (){
for i in $(ls $1);do
    dir_name=${i%.rar}
    mkdir $dir_name
    mv $i $dir_name
    (cd $dir_name
        unrar e $i
        mv $i ..)
    zip -r $dir_name $dir_name
done
}
at_clear (){
atq | awk '{print $1}' | xargs atrm
}
user-daemons(){
    $bin/emacs --daemon
    transmission-daemon
    mpd
}
uni(){
    printf "\u$1"
}
set-wine32(){
    export WINEARCH=win32
    export WINEPREFIX=~/.wine32
}
set-wine64(){
    export WINEARCH=win64
    export WINEPREFIX=~/.wine64
}
make-loop(){
    sudo mknod -m660 "/dev/loop$1" b 7 $1
}
flac_to_mp3(){
    local flac_input="$1"
    local mp3_output=$(echo "$1" | sed 's/.flac$/.mp3/')
    flac -d -c "$flac_input" | lame -h -b 320 - "$mp3_output"
}
loop_until_fail(){
    true;
    while [ $? -eq 0 ];do
        $@
    done
}
test_compile_c(){
    local default_headers="#include <stdio.h>\n
#include <stdlib.h>\n
#include <stdint.h>\n
#include <string.h>\n
#include <unistd.h>\n
"
    local tmp_c=$(mktemp)
    echo -e $default_headers >$tmp_c
    echo -e "$1" >> $tmp_c
    if [ "$2" ];then
        if [ ${2:(-2)} = ".s" ] || [ ${2:(-4)} = ".asm" ]; then
            gcc -x c -o "$2" $tmp_c -std=gnu99 -S -Og
        else 
            gcc -x c -o "$2" $tmp_c -std=gnu99 -c -Og
        fi
    else
        gcc -x c -o /dev/null $tmp_c -std=gnu99 -c -Og
    fi
}
